!function t(r,e,n){function i(f,u){if(!e[f]){if(!r[f]){var a="function"==typeof require&&require;if(!u&&a)return a(f,!0);if(o)return o(f,!0);var s=new Error("Cannot find module '"+f+"'");throw s.code="MODULE_NOT_FOUND",s}var h=e[f]={exports:{}};r[f][0].call(h.exports,function(t){var e=r[f][1][t];return i(e?e:t)},h,h.exports,t,r,e,n)}return e[f].exports}for(var o="function"==typeof require&&require,f=0;f<n.length;f++)i(n[f]);return i}({1:[function(t){var r=t("spark-md5"),e=t("base64-arraybuffer").encode;angular.module("angular.file",[]).factory("fileOperator",["$window","$q",function(t,n){function i(t,r){this.file=t,this.fileSize=t&&t.size||0,this.messages=[],this.maxChunkSize=r||1048576}return i.prototype.read=function(r,e){var i=this,o=new t.FileReader,f=n.defer();return function(n,f){var u;return i.file?(o.onloadend=function(){n(o.result)},o.onerror=function(t){f(new Error("read",t))},o.onabort=function(t){f(t)},u=t.File.prototype.slice.apply(i.file,[r,e]),void o.readAsArrayBuffer(u)):f(new Error("read","invalid file instance"))}(f.resolve,f.reject),f.promise},i.prototype.abort=function(){fileReader.abort()},i.prototype.getArrayBuffer=function(t,r){var e=this.correctRange(t,r);return t=e.start,r=e.length,this.read(t,t+r)},i.prototype.getUint8Array=function(t,r){return this.getArrayBuffer(t,r).then(function(t){return new Uint8Array(t)})},i.prototype.getBase64=function(t,r){return this.getArrayBuffer(t,r).then(function(t){return e(t)})},i.prototype.getMd5=function(t,e){var i=this.correctRange(t,e);return t=i.start,e=i.length,e<this.maxChunkSize?this.getArrayBuffer(t,e).then(function(t){return n.when(r.ArrayBuffer.hash(t))}):this.incMd5(t,e)},i.prototype.incMd5=function(t){function e(t,r){return a.notify(t/f),t>f?r(null,u.end()):void i.getArrayBuffer(t,o).then(function(n){return u.append(n),e(t+o,r)},function(t){return r(t)})}var i=this,o=i.maxChunkSize,f=i.fileSize,u=new r.ArrayBuffer,a=n.defer();return e(t,function(t,r){return t?a.reject(t):a.resolve(r)}),a.promise},i.prototype.correctRange=function(t,r){var e=this.fileSize;return t=t&&t>0?t:0,r=r&&e>t+r?r:e-t,{start:t,length:r}},function(t,r){return new i(t,r)}}])},{"base64-arraybuffer":2,"spark-md5":3}],2:[function(t,r,e){!function(t){"use strict";e.encode=function(r){var e,n=new Uint8Array(r),i=n.length,o="";for(e=0;i>e;e+=3)o+=t[n[e]>>2],o+=t[(3&n[e])<<4|n[e+1]>>4],o+=t[(15&n[e+1])<<2|n[e+2]>>6],o+=t[63&n[e+2]];return i%3===2?o=o.substring(0,o.length-1)+"=":i%3===1&&(o=o.substring(0,o.length-2)+"=="),o},e.decode=function(r){var e,n,i,o,f,u=.75*r.length,a=r.length,s=0;"="===r[r.length-1]&&(u--,"="===r[r.length-2]&&u--);var h=new ArrayBuffer(u),c=new Uint8Array(h);for(e=0;a>e;e+=4)n=t.indexOf(r[e]),i=t.indexOf(r[e+1]),o=t.indexOf(r[e+2]),f=t.indexOf(r[e+3]),c[s++]=n<<2|i>>4,c[s++]=(15&i)<<4|o>>2,c[s++]=(3&o)<<6|63&f;return h}}("ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/")},{}],3:[function(t,r,e){!function(t){if("object"==typeof e)r.exports=t();else if("function"==typeof define&&define.amd)define(t);else{var n;try{n=window}catch(i){n=self}n.SparkMD5=t()}}(function(){"use strict";var t=function(t,r){return t+r&4294967295},r=function(r,e,n,i,o,f){return e=t(t(e,r),t(i,f)),t(e<<o|e>>>32-o,n)},e=function(t,e,n,i,o,f,u){return r(e&n|~e&i,t,e,o,f,u)},n=function(t,e,n,i,o,f,u){return r(e&i|n&~i,t,e,o,f,u)},i=function(t,e,n,i,o,f,u){return r(e^n^i,t,e,o,f,u)},o=function(t,e,n,i,o,f,u){return r(n^(e|~i),t,e,o,f,u)},f=function(r,f){var u=r[0],a=r[1],s=r[2],h=r[3];u=e(u,a,s,h,f[0],7,-680876936),h=e(h,u,a,s,f[1],12,-389564586),s=e(s,h,u,a,f[2],17,606105819),a=e(a,s,h,u,f[3],22,-1044525330),u=e(u,a,s,h,f[4],7,-176418897),h=e(h,u,a,s,f[5],12,1200080426),s=e(s,h,u,a,f[6],17,-1473231341),a=e(a,s,h,u,f[7],22,-45705983),u=e(u,a,s,h,f[8],7,1770035416),h=e(h,u,a,s,f[9],12,-1958414417),s=e(s,h,u,a,f[10],17,-42063),a=e(a,s,h,u,f[11],22,-1990404162),u=e(u,a,s,h,f[12],7,1804603682),h=e(h,u,a,s,f[13],12,-40341101),s=e(s,h,u,a,f[14],17,-1502002290),a=e(a,s,h,u,f[15],22,1236535329),u=n(u,a,s,h,f[1],5,-165796510),h=n(h,u,a,s,f[6],9,-1069501632),s=n(s,h,u,a,f[11],14,643717713),a=n(a,s,h,u,f[0],20,-373897302),u=n(u,a,s,h,f[5],5,-701558691),h=n(h,u,a,s,f[10],9,38016083),s=n(s,h,u,a,f[15],14,-660478335),a=n(a,s,h,u,f[4],20,-405537848),u=n(u,a,s,h,f[9],5,568446438),h=n(h,u,a,s,f[14],9,-1019803690),s=n(s,h,u,a,f[3],14,-187363961),a=n(a,s,h,u,f[8],20,1163531501),u=n(u,a,s,h,f[13],5,-1444681467),h=n(h,u,a,s,f[2],9,-51403784),s=n(s,h,u,a,f[7],14,1735328473),a=n(a,s,h,u,f[12],20,-1926607734),u=i(u,a,s,h,f[5],4,-378558),h=i(h,u,a,s,f[8],11,-2022574463),s=i(s,h,u,a,f[11],16,1839030562),a=i(a,s,h,u,f[14],23,-35309556),u=i(u,a,s,h,f[1],4,-1530992060),h=i(h,u,a,s,f[4],11,1272893353),s=i(s,h,u,a,f[7],16,-155497632),a=i(a,s,h,u,f[10],23,-1094730640),u=i(u,a,s,h,f[13],4,681279174),h=i(h,u,a,s,f[0],11,-358537222),s=i(s,h,u,a,f[3],16,-722521979),a=i(a,s,h,u,f[6],23,76029189),u=i(u,a,s,h,f[9],4,-640364487),h=i(h,u,a,s,f[12],11,-421815835),s=i(s,h,u,a,f[15],16,530742520),a=i(a,s,h,u,f[2],23,-995338651),u=o(u,a,s,h,f[0],6,-198630844),h=o(h,u,a,s,f[7],10,1126891415),s=o(s,h,u,a,f[14],15,-1416354905),a=o(a,s,h,u,f[5],21,-57434055),u=o(u,a,s,h,f[12],6,1700485571),h=o(h,u,a,s,f[3],10,-1894986606),s=o(s,h,u,a,f[10],15,-1051523),a=o(a,s,h,u,f[1],21,-2054922799),u=o(u,a,s,h,f[8],6,1873313359),h=o(h,u,a,s,f[15],10,-30611744),s=o(s,h,u,a,f[6],15,-1560198380),a=o(a,s,h,u,f[13],21,1309151649),u=o(u,a,s,h,f[4],6,-145523070),h=o(h,u,a,s,f[11],10,-1120210379),s=o(s,h,u,a,f[2],15,718787259),a=o(a,s,h,u,f[9],21,-343485551),r[0]=t(u,r[0]),r[1]=t(a,r[1]),r[2]=t(s,r[2]),r[3]=t(h,r[3])},u=function(t){var r,e=[];for(r=0;64>r;r+=4)e[r>>2]=t.charCodeAt(r)+(t.charCodeAt(r+1)<<8)+(t.charCodeAt(r+2)<<16)+(t.charCodeAt(r+3)<<24);return e},a=function(t){var r,e=[];for(r=0;64>r;r+=4)e[r>>2]=t[r]+(t[r+1]<<8)+(t[r+2]<<16)+(t[r+3]<<24);return e},s=function(t){var r,e,n,i,o,a,s=t.length,h=[1732584193,-271733879,-1732584194,271733878];for(r=64;s>=r;r+=64)f(h,u(t.substring(r-64,r)));for(t=t.substring(r-64),e=t.length,n=[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],r=0;e>r;r+=1)n[r>>2]|=t.charCodeAt(r)<<(r%4<<3);if(n[r>>2]|=128<<(r%4<<3),r>55)for(f(h,n),r=0;16>r;r+=1)n[r]=0;return i=8*s,i=i.toString(16).match(/(.*?)(.{0,8})$/),o=parseInt(i[2],16),a=parseInt(i[1],16)||0,n[14]=o,n[15]=a,f(h,n),h},h=function(t){var r,e,n,i,o,u,s=t.length,h=[1732584193,-271733879,-1732584194,271733878];for(r=64;s>=r;r+=64)f(h,a(t.subarray(r-64,r)));for(t=s>r-64?t.subarray(r-64):new Uint8Array(0),e=t.length,n=[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],r=0;e>r;r+=1)n[r>>2]|=t[r]<<(r%4<<3);if(n[r>>2]|=128<<(r%4<<3),r>55)for(f(h,n),r=0;16>r;r+=1)n[r]=0;return i=8*s,i=i.toString(16).match(/(.*?)(.{0,8})$/),o=parseInt(i[2],16),u=parseInt(i[1],16)||0,n[14]=o,n[15]=u,f(h,n),h},c=["0","1","2","3","4","5","6","7","8","9","a","b","c","d","e","f"],p=function(t){var r,e="";for(r=0;4>r;r+=1)e+=c[t>>8*r+4&15]+c[t>>8*r&15];return e},y=function(t){var r;for(r=0;r<t.length;r+=1)t[r]=p(t[r]);return t.join("")},l=function(t){return y(s(t))},d=function(){this.reset()};return"5d41402abc4b2a76b9719d911017c592"!==l("hello")&&(t=function(t,r){var e=(65535&t)+(65535&r),n=(t>>16)+(r>>16)+(e>>16);return n<<16|65535&e}),d.prototype.append=function(t){return/[\u0080-\uFFFF]/.test(t)&&(t=unescape(encodeURIComponent(t))),this.appendBinary(t),this},d.prototype.appendBinary=function(t){this._buff+=t,this._length+=t.length;var r,e=this._buff.length;for(r=64;e>=r;r+=64)f(this._state,u(this._buff.substring(r-64,r)));return this._buff=this._buff.substr(r-64),this},d.prototype.end=function(t){var r,e,n=this._buff,i=n.length,o=[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0];for(r=0;i>r;r+=1)o[r>>2]|=n.charCodeAt(r)<<(r%4<<3);return this._finish(o,i),e=t?this._state:y(this._state),this.reset(),e},d.prototype._finish=function(t,r){var e,n,i,o=r;if(t[o>>2]|=128<<(o%4<<3),o>55)for(f(this._state,t),o=0;16>o;o+=1)t[o]=0;e=8*this._length,e=e.toString(16).match(/(.*?)(.{0,8})$/),n=parseInt(e[2],16),i=parseInt(e[1],16)||0,t[14]=n,t[15]=i,f(this._state,t)},d.prototype.reset=function(){return this._buff="",this._length=0,this._state=[1732584193,-271733879,-1732584194,271733878],this},d.prototype.destroy=function(){delete this._state,delete this._buff,delete this._length},d.hash=function(t,r){/[\u0080-\uFFFF]/.test(t)&&(t=unescape(encodeURIComponent(t)));var e=s(t);return r?e:y(e)},d.hashBinary=function(t,r){var e=s(t);return r?e:y(e)},d.ArrayBuffer=function(){this.reset()},d.ArrayBuffer.prototype.append=function(t){var r,e=this._concatArrayBuffer(this._buff,t),n=e.length;for(this._length+=t.byteLength,r=64;n>=r;r+=64)f(this._state,a(e.subarray(r-64,r)));return this._buff=n>r-64?e.subarray(r-64):new Uint8Array(0),this},d.ArrayBuffer.prototype.end=function(t){var r,e,n=this._buff,i=n.length,o=[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0];for(r=0;i>r;r+=1)o[r>>2]|=n[r]<<(r%4<<3);return this._finish(o,i),e=t?this._state:y(this._state),this.reset(),e},d.ArrayBuffer.prototype._finish=d.prototype._finish,d.ArrayBuffer.prototype.reset=function(){return this._buff=new Uint8Array(0),this._length=0,this._state=[1732584193,-271733879,-1732584194,271733878],this},d.ArrayBuffer.prototype.destroy=d.prototype.destroy,d.ArrayBuffer.prototype._concatArrayBuffer=function(t,r){var e=t.length,n=new Uint8Array(e+r.byteLength);return n.set(t),n.set(new Uint8Array(r),e),n},d.ArrayBuffer.hash=function(t,r){var e=h(new Uint8Array(t));return r?e:y(e)},d})},{}]},{},[1]);
//# sourceMappingURL=data:application/json;base64,